from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from bs4 import BeautifulSoup as BS  
from pyowm import OWM
import requests
import logging
import random

# —Ç–æ–∫–µ–Ω—ã
token1 = "6036818911:AAF7a2Z0ZwJgZGMnDi_7HKXb0e-YTOL4XYI"
owm = OWM('abee71f5d838cde57852ed360680f00a')

#–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ 
logging.basicConfig(level = logging.INFO)

bot = Bot(token=token1)
dp = Dispatcher(bot)

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è 
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class WeatherForm(StatesGroup):
    city = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ 
@dp.message_handler(commands=['start']) 
async def greetings(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üé≤ —Ä–∞–Ω–¥–æ–º')
    item2 = types.KeyboardButton('üåç –Ω–æ–≤–æ—Å—Ç–∏')
    item3 = types.KeyboardButton('üåß –ø–æ–≥–æ–¥–∞')
    item4 = types.KeyboardButton('‚õ© –∞–Ω–∏–º–µ')
    item6 = types.KeyboardButton('üíµ –∫—É—Ä—Å –≤–∞–ª—é—Ç')
    item7 = types.KeyboardButton('‚ùî –ø–æ–º–æ—â—å')

    markup.add(item1, item2, item3, item4, item6, item7)

    sti = open('C:/Users/Asus/Desktop/mycode.py/CHAT_BOT.py/static/hello.tgs', 'rb')
    await bot.send_sticker(message.chat.id, sti)

    await message.answer("–ø—Ä–∏–≤–µ—Ç–∏–∫", reply_markup=markup)

# –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª 
@dp.message_handler(content_types=['text'])
async def echo(message: types.Message):
    if message.text == 'üé≤ —Ä–∞–Ω–¥–æ–º':
        await message.answer(random.randint(0, 100))

    elif message.text == 'üåç –Ω–æ–≤–æ—Å—Ç–∏':
        markup = types.InlineKeyboardMarkup(row_width = 1)
        news1 = types.InlineKeyboardButton('–ê–π—Ç–∏ üì±', callback_data = '10')
        news2 = types.InlineKeyboardButton('–ò–≥—Ä—ã üéÆ', callback_data = '20')
        news3 = types.InlineKeyboardButton('–ü—Ä–æ—á–∏–µ üåç', callback_data = '30')
        
        markup.add(news1, news2, news3)
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', reply_markup = markup)


    elif message.text == 'üåß –ø–æ–≥–æ–¥–∞':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã:")
        await WeatherForm.city.set()   

    elif message.text == '‚õ© –∞–Ω–∏–º–µ':
        markup = types.InlineKeyboardMarkup(row_width = 2)
        item1 = types.InlineKeyboardButton('–≠–∫—à–µ–Ω üî•', callback_data = '01')
        item2 = types.InlineKeyboardButton('–î–µ—Ç–µ–∫—Ç–∏–≤ üîç', callback_data = '02')
        item3 = types.InlineKeyboardButton('–ö–æ–º–µ–¥–∏—è üòÅ', callback_data = '03')
        item4 = types.InlineKeyboardButton('–†–æ–º–∞–Ω—Ç–∏–∫–∞ ‚ù§Ô∏è', callback_data = '04')
        item5 = types.InlineKeyboardButton('–£–∂–∞—Å—ã üëª', callback_data = '05')
        item6 = types.InlineKeyboardButton('–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ ‚ú®', callback_data = '06')
        item7 = types.InlineKeyboardButton('–î—Ä–∞–º–∞ üíî', callback_data = '07')
        item8 = types.InlineKeyboardButton('–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å üí§', callback_data = '08')
        item9 = types.InlineKeyboardButton('–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è ‚öîÔ∏è', callback_data = '09')
        item10 = types.InlineKeyboardButton('–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏–∫–∞ üåã', callback_data = '010')
        item11 = types.InlineKeyboardButton('–°–ø–æ—Ä—Ç ‚öΩÔ∏è', callback_data = '011')
        item12 = types.InlineKeyboardButton('–§—ç–Ω—Ç–µ–∑–∏ üîÆ', callback_data = '012')
        item13 = types.InlineKeyboardButton('–ö–∏–±–µ—Ä–ø–∞–Ω–∫ü§ñ', callback_data = '013')
        item14 = types.InlineKeyboardButton('–ú–∏—Å—Ç–∏–∫–∞ üéÉ', callback_data = '014')
        item15 = types.InlineKeyboardButton('–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üí≠', callback_data = '015')
        item16 = types.InlineKeyboardButton('–®–∫–æ–ª–∞ üîî', callback_data = '016')        
        item17 = types.InlineKeyboardButton('–°—ë–Ω—ç–Ω üßë', callback_data = '017')
        item18 = types.InlineKeyboardButton('–°—ë–¥–∑—ë üë©', callback_data = '018')
        item19 = types.InlineKeyboardButton('–°—ç–π–Ω—ç–Ω üë®', callback_data = '019')
        item20 = types.InlineKeyboardButton('–î–∑—ë—Å—ç–π üßë', callback_data = '020')
        markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13, item14, item15, item16, item17, item18, item19, item20)
        await message.reply('–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∞–Ω–∏–º–µ', reply_markup = markup)

    elif message.text == 'üíµ –∫—É—Ä—Å –≤–∞–ª—é—Ç':
        markup = types.InlineKeyboardMarkup(row_width = 2)
        rate1 = types.InlineKeyboardButton('USD üíµ', callback_data = 'usd')
        rate2 = types.InlineKeyboardButton('EUR üí∂', callback_data = 'eur')
        rate3 = types.InlineKeyboardButton('RUB üí∑', callback_data = 'rub')
        rate4 = types.InlineKeyboardButton('JPY üí¥', callback_data = 'jpy')
        markup.add(rate1, rate2, rate3, rate4)
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup = markup)

    elif message.text == '‚ùî –ø–æ–º–æ—â—å':
        await message.answer('–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–≥—Ä –∞–π—Ç–∏ –∏ –£–∫—Ä–∞–∏–Ω—ã, –Ω–æ–≤–∏–Ω–∫–∏ –∞–Ω–∏–º–µ –ø–æ —Ä–∞–∑–Ω—ã–º –∂–∞–Ω—Ä–∞–º (–≤—Å–µ–≥–æ 21 –∂–∞–Ω—Ä). –ü–æ–≥–æ–¥–∞ –≤ –ª—é–±—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö, –∫—É—Ä—Å –≤–∞–ª—é—Ç(USD, EUR, RUB, JPY), –¥–∞–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.')

@dp.message_handler(state=WeatherForm.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
        city = data['city']
        try:
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(city)
            w = observation.weather
            t = w.temperature('celsius')['temp']
            await message.answer(f'–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {t} –≥—Ä–∞–¥—É—Å–æ–≤.')
        except:
            await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    await state.finish()


@dp.callback_query_handler(lambda call: call.data in ['usd', 'eur', 'rub', 'jpy'])
async def process_callback_currency(callback_query: types.CallbackQuery):
    try:
        if callback_query.data == 'usd':
            url = 'https://www.google.com/search?q=%D0%BA%D1%83%D1%80%D1%81+%D0%B4%D0%BE%D0%BB%D0%BB%D0%B0%D1%80%D0%B0+%D0%BA+%D0%B3%D1%80%D0%B8%D0%B2%D0%BD%D0%B5'
        elif callback_query.data == 'eur':
            url = 'https://www.google.com/search?q=%D0%BA%D1%83%D1%80%D1%81+%D0%B5%D0%B2%D1%80%D0%BE+%D0%BA+%D0%B3%D1%80%D0%B8%D0%B2%D0%BD%D0%B5'
        elif callback_query.data == 'rub':
            url = 'https://www.google.com/search?q=%D0%BA%D1%83%D1%80%D1%81+%D1%80%D1%83%D0%B1%D0%BB%D1%8F+%D0%B2+%D0%B3%D1%80%D0%B8%D0%B2%D0%BD%D0%B5&oq=%D0%BA%D1%83%D1%80%D1%81+%D1%80%D1%83%D0%B1%D0%BB%D1%8F+%D0%B2+&aqs=chrome.1.69i57j35i39j0i512j0i20i263i512j0i512l6.6165j1j15&sourceid=chrome&ie=UTF-8'
        elif callback_query.data == 'jpy':
            url = 'https://www.google.com/search?q=%D0%BA%D1%83%D1%80%D1%81+%D0%B9%D0%B5%D0%BD+%D0%BA+%D0%B3%D1%80%D0%B8%D0%B2%D0%BD%D0%B5&sxsrf=APwXEdewgg0vxIwI4T2wsl01ZcQHBQU1OQ%3A1682424462725&ei=jsJHZJDmK6qK9u8P4Ny32Ag&oq=%D0%BA%D1%83%D1%80%D1%81+%D0%B9%D0%B5%D0%BD+&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQARgAMgUIABCABDIFCAAQgAQyBQgAEIAEMgoIABCABBAUEIcCMgoIABCABBAUEIcCMgUIABCABDIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQ6BAgAEEdKBAhBGABQ-wFY-wFg9RRoAXACeACAAYoBiAGKAZIBAzAuMZgBAKABAcgBCMABAQ&sclient=gws-wiz-serp'
        headers = {
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        soup = BS(response.text, 'html.parser')
        articles_cards_1 = soup.find_all('div', class_='dDoNo ikb4Bb gsrt')
                    
        for article1 in articles_cards_1:
            article_title1 = article1.find('span', class_='DFlfde SwHCTb')
            if article_title1 is not None:
                exchange_rate = float(article_title1.get('data-value'))
                rounded_exchange_rate = round(exchange_rate, 2)
                await bot.send_message(callback_query.from_user.id, str(rounded_exchange_rate) + ' –≥—Ä–∏–≤–µ–Ω') 
    except:
        await bot.send_message(callback_query.from_user.id, ('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç'))
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda call: call.data in ['10', '20', '30'])
async def process_handled_news(callback_query: types.CallbackQuery):
    try:
        if callback_query.data == '10':            
            
            await bot.send_message(callback_query.from_user.id, ('–ù–æ–≤–æ—Å—Ç–∏ –ê–π—Ç–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'))
            headers = {
                'user-aent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'
            }
            url = ('https://www.securitylab.ru/news/')
            r = requests.get(url, headers = headers)
            soup = BS(r.text, 'lxml')
            article_cards = soup.find_all('a', class_ = 'article-card')
            
            for article in article_cards:
                article_title = article.find('h2', class_ = 'article-card-title').text.strip()
                article_url = f'https://www.securitylab.ru{article.get("href")}'
                ansver1 = (f'{article_title} {article_url} ')             
                await bot.send_message(callback_query.from_user.id, (ansver1))  
        elif callback_query.data == '20':
            
            await bot.send_message(callback_query.from_user.id, '–ù–æ–≤–æ—Å—Ç–∏ –ò–≥—Ä –∑–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
            headers = {
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'
            }
            url = 'https://stopgame.ru/news/all/p1'
            r = requests.get(url, headers=headers)
            soup = BS(r.text, 'html.parser')
            article_cards = soup.find_all('div', {'data-key': True})

            for article in article_cards:
                article_title = article.find('a', {'class': '_title_1tbpr_49'}).text.strip()
                article_url = f"https://stopgame.ru{article.find('a')['href']}"
                answer1 = f"{article_title}\n{article_url}\n"
                await bot.send_message(callback_query.from_user.id, answer1)
        elif callback_query.data == '30':
            
            await bot.send_message(callback_query.from_user.id, ('–ü—Ä–æ—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'))
            headers = {
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'
            }
            url = 'https://www.obozrevatel.com/location/ukraina/'
            r = requests.get(url, headers=headers)
            soup = BS(r.text, 'html.parser')
            article_cards = soup.find_all('article', class_='newsImgRowTime')
            for article in article_cards:
                article_title = article.find('a', class_='newsImgRowTime_titleLink').text.strip()
                article_url = f'https://stopgame.ru{article.find("a").get("href")}'
                ansver1 = f'{article_title}\n{article_url}\n'
                await bot.send_message(callback_query.from_user.id, ansver1)
    except:
        await bot.send_message(callback_query.from_user.id, ('–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ '))
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda call: call.data in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021'])
async def process_callback_currency(callback_query: types.CallbackQuery):
    try:
        genres_urls = {
            '01': 'https://animestars.org/aniserials/video/action/',
            '02': 'https://animestars.org/aniserials/video/detective/',
            '03': 'https://animestars.org/aniserials/video/comedy/',
            '04': 'https://animestars.org/aniserials/video/romance/',
            '05': 'https://animestars.org/aniserials/video/horror/',
            '06': 'https://animestars.org/aniserials/video/fantastic/',
            '07': 'https://animestars.org/aniserials/video/drama/',
            '08': 'https://animestars.org/aniserials/video/natural/',
            '09': 'https://animestars.org/aniserials/video/adventure/',
            '010': 'https://animestars.org/aniserials/video/postapocalypse/',
            '011': 'https://animestars.org/aniserials/video/sports/',
            '012': 'https://animestars.org/aniserials/video/fantasy/',
            '013': 'https://animestars.org/aniserials/video/cyberpunk/',
            '014': 'https://animestars.org/aniserials/video/mystery/',
            '015': 'https://animestars.org/aniserials/video/psychological/',
            '016': 'https://animestars.org/aniserials/video/school/',
            '017': 'https://animestars.org/aniserials/video/shounen/',
            '018': 'https://animestars.org/aniserials/video/shoujo/',
            '019': 'https://animestars.org/aniserials/video/seinen/',
            '020': 'https://animestars.org/aniserials/video/josei/',
            '021': 'https://animestars.org/aniserials/video/ecchi/'
        }                    
        
        url = genres_urls.get(callback_query.data)
        await bot.send_message(callback_query.from_user.id, ('–ù–æ–≤—ã–µ –∞–Ω–∏–º–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∂–∞–Ω—Ä–∞–º–∏'))
        headers = {
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'
        }
        r = requests.get(url, headers=headers)
        soup = BS(r.text, 'html.parser')
        article_cards = soup.find_all('a', class_='poster grid-item d-flex fd-column has-overlay')
        for article in article_cards:
            article_title = article.find('h3', class_='poster__title ws-nowrap').text.strip()
            article_url = f'{article.get("href")}'
            answer = f'{article_title}\n{article_url}'
            await bot.send_message(callback_query.from_user.id, answer)      
    except:
        await bot.send_message(callback_query.from_user.id, ('–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –Ω–æ–≤–∏–Ω–∫–∏ –∞–Ω–∏–º–µ'))
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)    


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

